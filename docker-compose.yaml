

  services:
    postgres:
      image: postgres:15
      container_name: peh-postgres-
      environment:
        POSTGRES_USER: demo
        POSTGRES_PASSWORD: demo
        POSTGRES_DB: demo
      ports:
        - "5432:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./docs/db-init:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U demo -d demo"]
        interval: 5s
        timeout: 5s
        retries: 20

      # --- Kafka (Einzelknoten, KRaft, kein ZooKeeper) ---
    kafka:
      image: bitnami/kafka:3.7
      container_name: peh-kafka
      ports:
        - "9092:9092"   # Client-Zugriff vom Host (Quarkus dev)
        - "9094:9094"   # optional: interner Port, falls weitere Container mÃ¶chten
      environment:
        - KAFKA_ENABLE_KRAFT=yes
        - KAFKA_CFG_NODE_ID=1
        - KAFKA_CFG_PROCESS_ROLES=broker,controller
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094,CONTROLLER://0.0.0.0:9093
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:9094
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_HOST
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true   # nur DEV
        - ALLOW_PLAINTEXT_LISTENER=yes
      healthcheck:
        test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
        interval: 10s
        timeout: 5s
        retries: 12
      depends_on:
        postgres:
          condition: service_started

    kafka-console:
      image: redpandadata/console:latest
      container_name: peh-kafka-console
      depends_on:
        kafka:
          condition: service_healthy
      ports:
        - "8089:8080"
      environment:
        KAFKA_BROKERS: kafka:9094
        SERVER_LISTENPORT: 8080
      restart: unless-stopped


#    scanner-service:
#      build:
#        context: ./scanner-service
#        dockerfile: src/main/docker/Dockerfile.jvm
#      ports:
#        - "8082:8080"
#
#    tracking-service:
#      build:
#        context: ./tracking-service
#        dockerfile: src/main/docker/Dockerfile.jvm
#      ports:
#        - "8083:8080"
#
#    shipment-service:
#      build:
#        context: ./shipment-service
#        dockerfile: src/main/docker/Dockerfile.jvm
#      ports:
#        - "8081:8080"

  volumes:
    postgres_data:
